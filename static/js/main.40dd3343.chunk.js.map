{"version":3,"sources":["components/Spinner/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Spinner","a","createElement","className","Countries","lazy","Promise","all","e","then","bind","CountryDetails","App","props","react_default","react","fallback","react_router","exact","from","to","path","component","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","_templateObject","theme","mode","app","react_router_dom","basename","styled_components_browser_esm","Fragment","src_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yFAAA,IAAAA,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAC,EAAA,IASeG,IANC,WACd,OACIF,EAAAG,EAAAC,cAAA,OAAKC,UAAU,6MCDfC,EAAYC,eAAK,kBAAMC,QAAAC,IAAA,CAAAV,EAAAW,EAAA,GAAAX,EAAAW,EAAA,GAAAX,EAAAW,EAAA,KAAAC,KAAAZ,EAAAa,KAAA,YACvBC,EAAiBN,eAAK,kBAAMC,QAAAC,IAAA,CAAAV,EAAAW,EAAA,GAAAX,EAAAW,EAAA,KAAAC,KAAAZ,EAAAa,KAAA,YAcnBE,EAZH,SAAAC,GACV,OACIC,EAAAb,EAAAC,cAACa,EAAA,SAAD,CAAUC,SAAUF,EAAAb,EAAAC,cAACF,EAAA,EAAD,OAClBc,EAAAb,EAAAC,cAACe,EAAA,EAAD,KACEH,EAAAb,EAAAC,cAACe,EAAA,EAAD,CAAUC,OAAK,EAACC,KAAK,IAAIC,GAAG,cAC5BN,EAAAb,EAAAC,cAACe,EAAA,EAAD,CAAOC,OAAK,EAACG,KAAK,aAAaC,UAAWlB,IAC1CU,EAAAb,EAAAC,cAACe,EAAA,EAAD,CAAOC,OAAK,EAACG,KAAK,0BAA0BC,UAAWX,OCD7CY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wUCVN,IAAMC,EAAcC,YAAHC,IAEK,SAAAjB,GAAK,MAAyB,SAArBA,EAAMkB,MAAMC,KAAkB,UAAY,WAC9D,SAAAnB,GAAK,MAAyB,SAArBA,EAAMkB,MAAMC,KAAkB,UAAY,SAGzC,SAAAnB,GAAK,MAAyB,SAArBA,EAAMkB,MAAMC,KAAkB,UAAY,YACzD,SAAAnB,GAAK,MAAyB,SAArBA,EAAMkB,MAAMC,KAClC,4CACA,wCACQ,SAAAnB,GAAK,MAAyB,SAArBA,EAAMkB,MAAMC,KAAkB,UAAY,UAGvDC,EACLnB,EAAAb,EAAAC,cAACgC,EAAA,EAAD,CAAQC,SAAS,cAChBrB,EAAAb,EAAAC,cAACkC,EAAA,EAAD,CAAeL,MAAO,CAAEC,KAAM,UAC9BlB,EAAAb,EAAAC,cAAAY,EAAAb,EAAAoC,SAAA,KACAvB,EAAAb,EAAAC,cAAC0B,EAAD,MACCd,EAAAb,EAAAC,cAACoC,EAAD,SAMHC,IAASC,OAAOP,EAAKQ,SAASC,eAAe,SDiGvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.40dd3343.chunk.js","sourcesContent":["import React from 'react';\nimport './Spinner.css';\n\nconst Spinner = () => {\n  return (\n      <div className=\"lds-dual-ring\"></div>\n  );\n};\n\nexport default Spinner;\n","import React, { Suspense, lazy } from 'react';\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport Spinner from './components/Spinner/Spinner';\n\nconst Countries = lazy(() => import('./containers/Countries/Countries'));\nconst CountryDetails = lazy(() => import('./components/CountryDetails/CountryDetails'));\n\nconst App = props => {\n  return (\n      <Suspense fallback={<Spinner />}>\n        <Switch>\n          <Redirect exact from=\"/\" to=\"countries\" />\n          <Route exact path=\"/countries\" component={Countries}></Route>\n          <Route exact path=\"/countries/:countryName\" component={CountryDetails}></Route>\n        </Switch>\n      </Suspense>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { ThemeProvider, createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\nbody {\n  background-color: ${props => props.theme.mode === 'dark' ? '#202C37' : '#FAFAFA'};\n  color: ${props => props.theme.mode === 'dark' ? '#ffffff' : 'black'};\n}\nnav, .country-card, input {\n\tbackground-color: ${props => props.theme.mode === 'dark' ? '#31404E' : '#ffffff '} !important;\n\tbox-shadow: ${props => props.theme.mode === 'dark' ? \n\t\t'0rem 0rem 1rem .2rem \thsl(209, 23%, 20%)' : \n\t\t'0rem 0rem 1rem .5rem hsl(0, 0%, 95%)'} !important;\n\tcolor: ${props => props.theme.mode === 'dark' ? '#ffffff' : 'black'} !important;\n}\n`\nconst app = (\n\t<Router basename=\"/countries\">\n\t\t<ThemeProvider theme={{ mode: 'light' }}>\n\t\t<>\n\t\t<GlobalStyle />\n\t\t\t<App />\n\t\t</>\n\t\t</ThemeProvider>\n\t</Router>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}