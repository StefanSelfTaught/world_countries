{"version":3,"sources":["components/Spinner/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Spinner","a","createElement","className","Countries","lazy","Promise","all","e","then","bind","CountryDetails","App","react_default","react","fallback","react_router","exact","from","to","path","component","Component","Boolean","window","location","hostname","match","app","react_router_dom","basename","src_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yFAAA,IAAAA,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAC,EAAA,IASeG,IANC,WACd,OACIF,EAAAG,EAAAC,cAAA,OAAKC,UAAU,6OCDfC,EAAYC,eAAK,kBAAMC,QAAAC,IAAA,CAAAV,EAAAW,EAAA,GAAAX,EAAAW,EAAA,GAAAX,EAAAW,EAAA,KAAAC,KAAAZ,EAAAa,KAAA,YACvBC,EAAiBN,eAAK,kBAAMC,QAAAC,IAAA,CAAAV,EAAAW,EAAA,GAAAX,EAAAW,EAAA,KAAAC,KAAAZ,EAAAa,KAAA,YAkBnBE,mLAdX,OACEC,EAAAZ,EAAAC,cAACY,EAAA,SAAD,KACED,EAAAZ,EAAAC,cAACY,EAAA,SAAD,CAAUC,SAAUF,EAAAZ,EAAAC,cAACF,EAAA,EAAD,OAClBa,EAAAZ,EAAAC,cAACc,EAAA,EAAD,KACEH,EAAAZ,EAAAC,cAACc,EAAA,EAAD,CAAUC,OAAK,EAACC,KAAK,IAAIC,GAAG,cAC5BN,EAAAZ,EAAAC,cAACc,EAAA,EAAD,CAAOC,OAAK,EAACG,KAAK,aAAaC,UAAWjB,IAC1CS,EAAAZ,EAAAC,cAACc,EAAA,EAAD,CAAOC,OAAK,EAACG,KAAK,0BAA0BC,UAAWV,cARjDW,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,sECXAC,EAAMf,EAAAZ,EAAAC,cAAC2B,EAAA,EAAD,CAAQC,SAAS,cAAajB,EAAAZ,EAAAC,cAAC6B,EAAD,OAE1CC,IAASC,OAAOL,EAAKM,SAASC,eAAe,SDwHvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,KAAK,SAAA8B,GACjCA,EAAaC","file":"static/js/main.cefdf287.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n      <div className=\"lds-dual-ring\"></div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { Component, Fragment, Suspense, lazy } from 'react';\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport Spinner from './components/Spinner/Spinner';\n\nconst Countries = lazy(() => import('./containers/Countries/Countries'));\nconst CountryDetails = lazy(() => import('./components/CountryDetails/CountryDetails'));\n\nclass App extends Component {\n  render () {\n    return (\n      <Fragment>\n        <Suspense fallback={<Spinner />}>\n          <Switch>\n            <Redirect exact from=\"/\" to=\"countries\" />\n            <Route exact path=\"/countries\" component={Countries}></Route>\n            <Route exact path=\"/countries/:countryName\" component={CountryDetails}></Route>\n          </Switch>\n        </Suspense>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nconst app = <Router basename=\"/countries\"><App /></Router>\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}