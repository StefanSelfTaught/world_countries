{"version":3,"sources":["components/Navbar/Navbar.js","components/SearchField/Filters.js","components/CountryCard/CountryCard.js","containers/CountryCards/CountryCards.js","components/ErrorBoundry.js","components/Spinner/Spinner.js","containers/Countries/Countries.js","components/CountryDetails/CountryDetails.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","Filters","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChange","searchChange","type","placeholder","react_select_browser_esm","value","selectedOption","options","handleCountryChange","React","Component","CountryCard","react_router_dom","to","concat","name","src","img","alt","population","region","capital","CountryCards","countries","map","_ref","flag","components_CountryCard_CountryCard","key","ErrorBoundry","state","hasError","setState","children","Spinner","class","label","Countries","filter","error","isLoaded","handleChange","e","_this","target","_this2","fetch","then","resp","json","data","catch","err","filteredCountries","_this3","_this$state","country","toLowerCase","includes","containers_CountryCards_CountryCards","components_Spinner_Spinner","react","components_Navbar_Navbar","components_SearchField_Filters","components_ErrorBoundry","CountryDetails","specificCountry","handleClick","history","goBack","params","match","countryName","nativeName","subregion","topLevelDomain","currencies","code","languages","lng","onClick","App","react_router","exact","from","path","component","Boolean","window","location","hostname","app","basename","src_App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1b0825d8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Navbar.css';\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav>\r\n      <div className='container'>\r\n        <h2>Where in the world?</h2>\r\n        <p>\r\n          <i className='far fa-moon' /> Dark Mode\r\n        </p>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\nimport './Filters.css';\r\nimport Select from 'react-select';\r\n\r\nclass Filters extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='input-container'>\r\n        <i className='fas fa-search' />\r\n        <input\r\n          onChange={this.props.searchChange}\r\n          type='text'\r\n          placeholder='Search for a country...'\r\n        />\r\n        <Select\r\n          className='select'\r\n          value={this.props.selectedOption}\r\n          options={this.props.options}\r\n          onChange={this.props.handleCountryChange}\r\n          placeholder='Filter by Region'\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Filters;\r\n","import React from 'react';\r\nimport './CountryCard.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst CountryCard = props => {\r\n  return (\r\n    <div className='country-card'>\r\n    <Link\r\n      className=\"link\" \r\n      to={`/countries/${props.name}`}\r\n    >\r\n      <img src={props.img} alt='text' />\r\n      <div className='info'>\r\n        <h3>{props.name}</h3>\r\n        <ul>\r\n          <li>\r\n            <span>Population</span>: {props.population}\r\n          </li>\r\n          <li>\r\n            <span>Region</span>: {props.region}\r\n          </li>\r\n          <li>\r\n            <span>Capital</span>: {props.capital}\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryCard;\r\n","import React from 'react';\r\nimport './CountryCards.css';\r\nimport CountryCard from '../../components/CountryCard/CountryCard';\r\n\r\nconst CountryCards = props => {\r\n  return (\r\n    <div className='grid'>\r\n      {props.countries.map(({ flag, name, population, region, capital }) => {\r\n        return (\r\n          <CountryCard\r\n            img={flag}\r\n            key={name}\r\n            name={name}\r\n            population={population}\r\n            region={region}\r\n            capital={capital}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryCards;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  state = {\r\n    hasError: false\r\n  };\r\n\r\n  componentDidCatch() {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h2>Something went wrong</h2>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n      <div class=\"lds-dual-ring\"></div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { Component, Fragment } from 'react';\r\nimport Navbar from '../../components/Navbar/Navbar';\r\nimport Filters from '../../components/SearchField/Filters';\r\nimport CountryCards from '../CountryCards/CountryCards';\r\nimport ErrorBoundry from '../../components/ErrorBoundry';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\n\r\nconst options = [\r\n  { value: 'all', label: 'All Countries' },\r\n  { value: 'Africa', label: 'Africa' },\r\n  { value: 'Americas', label: 'America' },\r\n  { value: 'Asia', label: 'Asia' },\r\n  { value: 'Europe', label: 'Europe' },\r\n  { value: 'Oceania', label: 'Oceania' }\r\n];\r\n\r\nclass Countries extends Component {\r\n  state = {\r\n    countries: [],\r\n    filter: '',\r\n    error: null,\r\n    isLoaded: false,\r\n    selectedOption: { value: 'all', label: 'All countries' },\r\n  };\r\n\r\n  componentDidMount() {\r\n    const url = 'https://restcountries.eu/rest/v2/all?fields=name;capital;population;region;flag';\r\n    fetch(url)\r\n      .then(resp => resp.json())\r\n      .then(data =>\r\n        this.setState({\r\n          countries: data,\r\n          isLoaded: true\r\n        })\r\n      )\r\n      .catch(err =>\r\n        this.setState({\r\n          error: true\r\n        })\r\n      );\r\n  }\r\n\r\n  handleChange = e => {\r\n    try {\r\n      this.setState({\r\n        filter: e.target.value\r\n      });\r\n    } catch (error) {\r\n      this.setState({\r\n        error: true\r\n      });\r\n    }\r\n  };\r\n\r\n  handleCountryChange = selectedOption => {\r\n    this.setState({ selectedOption });\r\n  };\r\n\r\n  render() {\r\n    const { filter, error, isLoaded, selectedOption } = this.state;\r\n    let filteredCountries;\r\n    filteredCountries = this.state.countries.filter(country => {\r\n      if(selectedOption['value'] !== 'all'){\r\n        return country.region === selectedOption['value'];\r\n      } else {\r\n        return filteredCountries = this.state.countries\r\n      }\r\n    })\r\n\r\n    filteredCountries = filteredCountries.filter(country => {\r\n        return country.name.toLowerCase().includes(filter.toLowerCase());\r\n    });\r\n\r\n    let countries;\r\n    !isLoaded\r\n      ? (countries = <Spinner />)\r\n      : (countries = <CountryCards countries={filteredCountries} />);\r\n\r\n    if (error) {\r\n      return <h1>Error: Something went wrong </h1>;\r\n    } else {\r\n      return (\r\n        <Fragment>\r\n          <Navbar />\r\n          <Filters\r\n            searchChange={this.handleChange}\r\n            handleCountryChange={this.handleCountryChange}\r\n            selectedOption={this.state.selectedOption}\r\n            options={options}\r\n          />\r\n          <ErrorBoundry>{countries}</ErrorBoundry>\r\n        </Fragment>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Countries;\r\n","import React, { Fragment, Component } from 'react';\r\nimport Navbar from '../Navbar/Navbar';\r\nimport Spinner from '../Spinner/Spinner';\r\nimport './CountryDetails.css';\r\n\r\nclass CountryDetails extends Component {\r\n\r\n  state = {\r\n    specificCountry: [],\r\n    isLoaded: false,\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { match: { params } } = this.props;\r\n    fetch(`https://restcountries.eu/rest/v2/name/${params.countryName}?fullText=true`)\r\n      .then(resp => resp.json())\r\n      .then(data =>\r\n        this.setState({\r\n          specificCountry: data,\r\n          isLoaded: true\r\n        })\r\n      )\r\n  }\r\n\r\n  handleClick = () => {\r\n    this.props.history.goBack();\r\n  }\r\n\r\n  render(){\r\n    const { isLoaded } = this.state;\r\n    let name, nativeName, population, region, subregion, capital, topLevelDomain, currencies, languages, img;\r\n    this.state.specificCountry.map(country => {\r\n      name = country.name;\r\n      img = country.flag;\r\n      nativeName = country.nativeName;\r\n      population = country.population;\r\n      region = country.region;\r\n      subregion = country.subregion;\r\n      capital = country.capital;\r\n      topLevelDomain = country.topLevelDomain;\r\n      currencies = country.currencies[0].code;\r\n      languages = country.languages.map(lng => lng.name);\r\n    })\r\n\r\n    if(!isLoaded){\r\n      return <Spinner />\r\n    } else {\r\n      return (\r\n      <Fragment>\r\n        <Navbar />\r\n        <div className=\"detailsContainer\">\r\n          <button className=\"btn\" onClick={this.handleClick}>\r\n            <i className=\"fas fa-arrow-left\"></i>\r\n            Back\r\n          </button>\r\n          <div className=\"info-main\">\r\n           <img src={img} alt />\r\n            <div className=\"info-right\">\r\n              <h1>{name}</h1>\r\n              <ul className=\"left\">\r\n                <li><span>Native Name:</span> {nativeName}</li>\r\n                <li><span>Population:</span> {population}</li>\r\n                <li><span>Region:</span> {region}</li>\r\n                <li><span>Sub Region:</span> {subregion}</li>\r\n                <li><span>Capital:</span> {capital}</li>\r\n              </ul>\r\n              <ul className=\"right\">\r\n                <li><span>Top Level Domain:</span> {topLevelDomain}</li>\r\n                <li><span>Currencies:</span> {currencies}</li>\r\n                <li><span>Languages:</span> {currencies}</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n       )\r\n    }\r\n  }\r\n};\r\n\r\nexport default CountryDetails;\r\n","import React, { Component, Fragment } from 'react';\nimport Countries from './containers/Countries/Countries';\nimport { Route, Switch, Redirect } from \"react-router-dom\";\nimport CountryDetails from \"./components/CountryDetails/CountryDetails\";\n\nclass App extends Component {\n  render () {\n    return (\n      <Fragment>\n        <Switch>\n          <Redirect exact from=\"/\" to=\"countries\" />\n          <Route exact path=\"/countries\" component={Countries}></Route>\n          <Route exact path=\"/countries/:countryName\" component={CountryDetails}></Route>\n        </Switch>\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nconst app = <Router basename=\"/countries\"><App /></Router>\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}